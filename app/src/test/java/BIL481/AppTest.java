/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package BIL481;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

public class AppTest {
    App c;
    ArrayList<String> poem = new ArrayList<String>();
    String line0 = "This is a valid line for the poem.", line1 = "this is not a valid line"
            , line2 = "This is als0 not a valid line", line3 = "Not a valid poem if it has less than four lines"
            , line4 = "Not a valid poem if it doesn't have mode four lines", line5 = "Lines can contain ,.:;'\"!?()"
            , line6 = "But it cannot start with a lover case letter", line7 = "It cannot contain a number"
            , line8 = "If all requirements are met", line9 = "The app will crypt the poem"
            , line10 = "Firstly you need to declare the cryption rotation", line11 = "True for forward and false for backward."
            , line12 = "Than an integer for the leap number", line13 = "Than the Arraylist with the poem lines for its elements"
            , line14 = "You can use these lines to check.", line15 = "Have fun :)))";

    @BeforeEach
    public void setUp() {c = new App();}

    @Test
    public void testLeapGreaterThanAlphabet() {
        poem = new ArrayList<String>();
        poem.add(line0);
        poem.add(line11);
        poem.add(line6);
        poem.add(line7);
        poem.add(line8);
        poem.add(line9);
        poem.add(line14);
        poem.add(line15);
        assertFalse(c.crypt(false, 27, poem));
    }

    @Test
    public void testModeFourLength() {
        poem = new ArrayList<String>();
        poem.add(line10);
        poem.add(line11);
        poem.add(line6);
        poem.add(line7);
        poem.add(line8);
        poem.add(line9);
        assertFalse(c.crypt(true, 5, poem));
    }

    @Test
    public void testNumberThrowsException() {
        poem = new ArrayList<String>();
        poem.add(line5);
        poem.add(line2);
        poem.add(line3);
        poem.add(line4);
        assertThrows(RuntimeException.class, () -> { c.crypt(false, 11, poem); });
    }

    @Test
    public void testLowerCaseThrowsException() {
        poem = new ArrayList<String>();
        poem.add(line1);
        poem.add(line12);
        poem.add(line3);
        poem.add(line4);
        assertThrows(RuntimeException.class, () -> { c.crypt(true, 1, poem); });
    }

    @Test
    public void testValidPoem() {
        poem = new ArrayList<String>();
        poem.add(line13);
        poem.add(line11);
        poem.add(line6);
        poem.add(line7);
        poem.add(line8);
        poem.add(line9);
        poem.add(line14);
        poem.add(line15);
        assertTrue(c.crypt(false, 7, poem));
    }
}

